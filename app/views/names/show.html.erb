
<style>
    body {
        font: 12px sans-serif;
    }
    .axis path,
    .axis line {
        fill: none;
        stroke: #000;
        shape-rendering: crispEdges;
    }

    .x.axis path {
        display: none;
    }

    .line {
        fill: none;
        stroke: steelblue;
        stroke-width: 1.5px;
    }
    .s{
        fill:red;
        fill-opacity: .6;
    }
    .p{
        fill:blue;
        fill-opacity: .6;
    }
    .d{
        fill:green;
        fill-opacity: .6;
    }
</style>

<p id="notice"><%= notice %></p>

<p>
  <strong>Calc name:</strong>
  <%= @name.calc_name %>
</p>
<p><%= @name.calc_num %></p>

<%= link_to 'Edit', edit_name_path(@name) %> |
<%= link_to 'Back', names_path %>

<table>
    <tr>
        <th>Atoms</th>
        <th>s</th>
        <th>p</th>
        <th>d</th>
    </tr>
    <tr>
        <% newAtom = 0 %>
        <% @name.states.order('id ASC').each_with_index do |state, i| %>

            <% identifier = "id" + state.orbital_subset.to_s + state.atom_subset[0].to_s %>

            <% if state.orbital_subset == 0 && newAtom != 0 %>
                </tr>
                <% newAtom = 0 %>
            <% end %>

            <% if state.orbital_subset == 0 %>
                <td><%= state.atom_subset %></td>
                <td>
                    <input class="checkbox" type="checkbox" name="<%=identifier %>" value="<%=identifier %>" checked>
                </td>
                <% newAtom += 1 %>
            <% elsif state.orbital_subset == 1 %>
                <td>
                    <input class="checkbox" type="checkbox" name="<%=identifier %>" value="<%=identifier %>" checked>
                </td>

            <% else state.orbital_subset == 2 %>
                <td>
                    <input class="checkbox" type="checkbox" name="<%=identifier %>" value="<%=identifier %>" checked>
                </td>
            <% end %>
        <% end %>
    </tr>
</table>
<br>
Select/Deselect All <input type="checkbox" id="selectall" checked/>

<table>
  <tr>
    <script type="text/javascript">
        var xMax = 3.5,
            xMin = 0,
            yMax = 4,
            yMin = -15;

        results = [];
        <% @name.states.order('id ASC').each_with_index do |state, i| %>

            data= <%=raw state.energy_list%>.map(function(strVale) {
                return Number(strVale);
            });

            energy= <%=raw state.dos_list%>.map(function(strVale) {
                return Number(strVale);
            });

            tempResults =[];
            var i = 0;
            while (i < data.length) {
                tempResults[i] = [energy[i], data[i]];
                i++;
            }
            
            tempResults = tempResults.map(function(d) {
                return {
                    x: d[0],
                    y: d[1],
                    orbital:String("id" + <%=state.orbital_subset.to_s%> + <%=state.atom_subset[0].to_s %>)
                };
            });

            results.push(tempResults);

        <% end %>

        var width = 500,
        height = 500,
        margin = 30,
        duration = 500,
        x = d3.scale.linear() 
            .domain([xMin, xMax])
            .range([margin, width - margin]),
        y = d3.scale.linear()
            .domain([yMin, yMax])
            .range([height - margin, margin]);
            
        var line = d3.svg.line()
            .x(function(d){return x(d.x);})
            .y(function(d){return y(d.y);});

        var svg = d3.select("body")
            .append("svg:svg")
            .attr("height", height)
            .attr("width", width);

        var area = d3.svg.area() 
            .x(function(d) { return x(d.x); }) 
            .y0(yStart()) 
            .y1(function(d) { return y(d.y); });       

        svg.selectAll("path.area")
                .data(results)
            .enter()
                .append("path")
                .attr("id", function(d){
                    return d[0].orbital;
                })
                .attr("class", function(d){
                    var t = parseInt(d[0].orbital.substring(2,3));
                    switch (t){
                        case 0:
                            return "orb class s";
                        case 1:
                            return "orb class p";
                        case 2:
                            return "orb class d";
                    }
                })
                .attr("d", function(d){return area(d);});

        renderAxes(svg);  

        function renderAxes(svg){            
            var xAxis = d3.svg.axis()
                    .scale(d3.scale.linear()
                    .domain([xMin,xMax])
                    .range([0, quadrantWidth()]))
                    .orient("bottom");            
                    
            var yAxis = d3.svg.axis()
                    .scale(d3.scale.linear()
                    .domain([yMin,yMax])
                    .range([quadrantHeight(), 0]))
                    .orient("left");
            
            svg.append("g")        
                .attr("class", "axis")
                .attr("transform", function(){
                    return "translate(" + xStart() + "," + yStart() + ")";
                })
                .call(xAxis);
                
            svg.append("g")        
                .attr("class", "axis")
                .attr("transform", function(){
                    return "translate(" + xStart() + "," + yEnd() + ")";
                })
                .call(yAxis);
        } 

        function xStart(){return margin;}        
        function yStart(){return height - margin;}
        function xEnd(){return width - margin;}
        function yEnd(){return margin;}
        function quadrantWidth(){return width - 2 * margin;}
        function quadrantHeight(){return height - 2 * margin;}

        <% @name.states.order('id ASC').each_with_index do |state, i| %>
            <% identifier = "id" + state.orbital_subset.to_s + state.atom_subset[0].to_s %>
            d3.selectAll("input[value=<%=identifier %>]").on("change", function(){
                <% identifier = "#"+identifier %>
                svg.selectAll("<%=identifier %>")
                .style("display", this.checked ? null : "none");
            });
        <% end %>

        $(document).ready(function() {
            $('#selectall').click(function(event) {  //on click 
                if(this.checked) { // check select status
                    $('.checkbox').each(function() { //loop through each checkbox
                        this.checked = true;
                        });  
                    svg.selectAll(".orb").style("display", null);
                }else{
                    $('.checkbox').each(function() { //loop through each checkbox
                        this.checked = false;      
                    }); 
                    svg.selectAll(".orb").style("display", "none");        
                }
            });    
        });

  </script>
</tr>
</table>
