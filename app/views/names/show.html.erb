
<style>
    body {
        font: 12px sans-serif;
    }
    .axis path,
    .axis line {
        fill: none;
        stroke: #000;
        shape-rendering: crispEdges;
    }

    .x.axis path {
        display: none;
    }

    .line {
        fill: none;
        stroke: steelblue;
        stroke-width: 1.5px;
    }
    .s{
        fill:red;
        fill-opacity: .6;
    }
    .p{
        fill:blue;
        fill-opacity: .6;
    }
    .d{
        fill:green;
        fill-opacity: .6;
    }

    svg {
      font: 10px sans-serif;
    }

    .area {
      fill: steelblue;
      clip-path: url(#clip);
    }

    .axis path,
    .axis line {
      fill: none;
      stroke: #000;
      shape-rendering: crispEdges;
    }

    .brush .extent {
      stroke: #fff;
      fill-opacity: .125;
      shape-rendering: crispEdges;
    }
</style>

<p id="notice"><%= notice %></p>

<p>
  <strong>Calc name:</strong>
  <%= @name.calc_name %>
</p>
<p><%= @name.calc_num %></p>

<%= link_to 'Edit', edit_name_path(@name) %> |
<%= link_to 'Back', names_path %>

<table>
    <tr>
        <th>Atoms</th>
        <th>s</th>
        <th>p</th>
        <th>d</th>
    </tr>
    <tr>
        <% newAtom = 0 %>
        <% @name.states.order('id ASC').each_with_index do |state, i| %>

            <% identifier = "id" + state.orbital_subset.to_s + state.atom_subset[0].to_s %>

            <% if state.orbital_subset == 0 && newAtom != 0 %>
                </tr>
                <% newAtom = 0 %>
            <% end %>

            <% if state.orbital_subset == 0 %>
                <td><%= state.atom_subset %></td>
                <td>
                    <input class="checkbox" type="checkbox" name="<%=identifier %>" value="<%=identifier %>" checked>
                </td>
                <% newAtom += 1 %>
            <% elsif state.orbital_subset == 1 %>
                <td>
                    <input class="checkbox" type="checkbox" name="<%=identifier %>" value="<%=identifier %>" checked>
                </td>

            <% else state.orbital_subset == 2 %>
                <td>
                    <input class="checkbox" type="checkbox" name="<%=identifier %>" value="<%=identifier %>" checked>
                </td>
            <% end %>
        <% end %>
    </tr>
</table>
<br>
Select/Deselect All <input type="checkbox" id="selectall" checked/>
<br>

<script type="text/javascript">
    var results =[];
    <% @name.states.order('id ASC').each_with_index do |state, i| %>

        data= <%=raw state.energy_list%>.map(function(strVale) {
            return Number(strVale);
        });

        energy= <%=raw state.dos_list%>.map(function(strVale) {
            return Number(strVale);
        });

        tempResults =[];
        var i = 0;
        while (i < data.length) {
            tempResults[i] = [energy[i], data[i]];
            i++;
        }
        
        tempResults = tempResults.map(function(d) {
            return {
                x: d[1],
                y: d[0],
                orbital:String("id" + <%=state.orbital_subset.to_s%> + <%=state.atom_subset[0].to_s %>)
            };
        });

        results.push(tempResults);

        <% if i == 1 %>
            <% break %>
        <% end %>

    <% end %>


    var margin = {top: 10, right: 10, bottom: 100, left: 40},
        margin2 = {top: 430, right: 10, bottom: 20, left: 40},
        width = 960 - margin.left - margin.right,
        height = 500 - margin.top - margin.bottom,
        height2 = 500 - margin2.top - margin2.bottom;

    var x = d3.scale.linear().range([0, width]),
        x2 = d3.scale.linear().range([0, width]),
        y = d3.scale.linear().range([height, 0]),
        y2 = d3.scale.linear().range([height2, 0]);

    var xAxis = d3.svg.axis().scale(x).orient("bottom"),
        xAxis2 = d3.svg.axis().scale(x2).orient("bottom"),
        yAxis = d3.svg.axis().scale(y).orient("left");

    var brush = d3.svg.brush()
        .x(x2)
        .on("brush", brushed);

    var area = d3.svg.area()
        .interpolate("monotone")
        .x(function(d) { return x(d.x); })
        .y0(height)
        .y1(function(d) { return y(d.y); });

    var area2 = d3.svg.area()
        .interpolate("monotone")
        .x(function(d) { return x2(d.x); })
        .y0(height2)
        .y1(function(d) { return y2(d.y); });

    var svg = d3.select("body").append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom);

    svg.append("defs").append("clipPath")
        .attr("id", "clip")
      .append("rect")
        .attr("width", width)
        .attr("height", height);

    var focus = svg.append("g")
        .attr("class", "focus")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    var context = svg.append("g")
        .attr("class", "context")
        .attr("transform", "translate(" + margin2.left + "," + margin2.top + ")");

    function dosPlot(results) {
        console.log(results);
      x.domain([-15, 4]);
      y.domain([0, 4]);
      x2.domain(x.domain());
      y2.domain(y.domain());

      focus.append("path")
          .data(results)
          .attr("class", "area")
          .attr("d", area);

      focus.append("g")
          .attr("class", "x axis")
          .attr("transform", "translate(0," + height + ")")
          .call(xAxis);

      focus.append("g")
          .attr("class", "y axis")
          .call(yAxis);

      context.append("path")
          .data(results)
          .attr("class", "area")
          .attr("d", area2);

      context.append("g")
          .attr("class", "x axis")
          .attr("transform", "translate(0," + height2 + ")")
          .call(xAxis2);

      context.append("g")
          .attr("class", "x brush")
          .call(brush)
        .selectAll("rect")
          .attr("y", -6)
          .attr("height", height2 + 7);
    }

    dosPlot(results);

    function brushed() {
      x.domain(brush.empty() ? x2.domain() : brush.extent());
      focus.select(".area").attr("d", area);
      focus.select(".x.axis").call(xAxis);
    }

</script>
